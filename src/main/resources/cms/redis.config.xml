<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	
	<!-- jedis pool配置 -->   
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">    
        <property name="maxIdle" value="${redis.maxIdle}" />   <!-- 最大能够保持idel状态的对象数 -->  
        <property name="maxTotal" value="${redis.maxTotal}" />    <!-- 控制一个pool可分配多少个jedis实例 -->   
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />    <!-- 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->   
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" /> <!-- 多长时间检查一次连接池中空闲的连接 -->  
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" /> <!-- 空闲连接多长时间后会被收回, 单位是毫秒 --> 
        <property name="testOnBorrow" value="${redis.testOnBorrow}" /> <!-- 当调用borrow Object方法时，是否进行有效性检查 -->  
        <property name="testOnReturn" value="${redis.testOnReturn}" /> <!-- 当调用return Object方法时，是否进行有效性检查 -->  
        <property name="testWhileIdle" value="${redis.testWhileIdle}" /> 
    </bean>   
	
	
	<!-- <context:property-placeholder location="classpath:database.properties"
		ignore-unresolvable="true" /> -->
	<bean id="jedisConnFactory" 
	    	class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
		    p:use-pool="true"
		    p:host-name="${redis.host}" 
		    p:port="${redis.port}" 
		    p:password="${redis.pass}"
		    >  
		    <constructor-arg index="0" ref="poolConfig" />          
    </bean>
    
    	<!-- redis template definition -->
	<bean id="redisTemplate" 
	    class="org.springframework.data.redis.core.RedisTemplate" 
	    p:connection-factory-ref="jedisConnFactory">
    	  <property name="KeySerializer">  
	          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>  
	      </property>  
	      <property name="ValueSerializer">  
	          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>  
	      </property> 
    </bean>
	
</beans>